!function r(n,e,o){function t(i,c){if(!e[i]){if(!n[i]){var f="function"==typeof require&&require;if(!c&&f)return f(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var d=e[i]={exports:{}};n[i][0].call(d.exports,function(r){var e=n[i][1][r];return t(e?e:r)},d,d.exports,r,n,e,o)}return e[i].exports}for(var u="function"==typeof require&&require,i=0;i<o.length;i++)t(o[i]);return t}({1:[function(r,n,e){"use strict";window.game=function(r,n,e){}(jQuery,window,document);(function(){function r(){}function n(n,e){var c;u++,queueEntry={src:n,callback:e,loaded:!1},o.push(queueEntry),c=new Imahe,c.onload=c.onerror=function(){t++,queueEntry.loaded=!0,i||r()},c.src=n}function e(){}var o=[],t=0,u=0,i=!1;return{load:n,setup:e}})()},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
